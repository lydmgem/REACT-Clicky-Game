{"ast":null,"code":"import _classCallCheck from \"/Users/lydmgem/Desktop/Coding-Bootcamp/Homework/2019/April/Apr-21/REACT-Clicky-Game/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/lydmgem/Desktop/Coding-Bootcamp/Homework/2019/April/Apr-21/REACT-Clicky-Game/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/lydmgem/Desktop/Coding-Bootcamp/Homework/2019/April/Apr-21/REACT-Clicky-Game/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/lydmgem/Desktop/Coding-Bootcamp/Homework/2019/April/Apr-21/REACT-Clicky-Game/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/lydmgem/Desktop/Coding-Bootcamp/Homework/2019/April/Apr-21/REACT-Clicky-Game/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/lydmgem/Desktop/Coding-Bootcamp/Homework/2019/April/Apr-21/REACT-Clicky-Game/src/App.js\";\nimport React from \"react\";\nimport Scoreboard from \"./components/Scoreboard\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport Card from \"./components/Card\";\nimport characters from \"./characters.json\";\nimport \"./App.css\";\n\nvar App =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      characters: characters,\n      score: 0,\n      topScore: 0,\n      msg: \"Click a character to begin!\"\n    };\n\n    _this.charSelect = function (id) {\n      var sortedChars = _this.state.characters.sort(function () {\n        return Math.random() - 0.5;\n      });\n\n      _this.setState({\n        characters: sortedChars\n      });\n\n      var selectedChar = _this.state.characters.find(function (character) {\n        return character.id === id;\n      });\n\n      console.log(selectedChar);\n\n      if (selectedChar.clicked) {\n        var charArr = _this.state.characters;\n\n        for (var i = 0; i < charArr.length; i++) {\n          charArr[i].clicked = false;\n        }\n\n        _this.setState({\n          score: 0,\n          characters: charArr,\n          msg: \"Sorry, try again!\"\n        });\n      } else {\n        selectedChar.clicked = true;\n\n        if (_this.state.score < 11) {\n          //console.log(\"SCORE < 12 before adding 1\", this.state.score);\n          _this.setState({\n            score: _this.state.score + 1,\n            msg: \"Good guess - keep on going!\"\n          });\n\n          if (_this.state.score === _this.state.topScore) {\n            _this.setState({\n              topScore: _this.state.topScore + 1\n            });\n          }\n\n          console.log(\"ORIGINAL\", _this.state.butterflies);\n        } else if (_this.state.score === 11) {\n          //console.log(\"SCORE === 12 before clearing\", this.state.score);\n          var reset = _this.state.characters.map(function (character) {\n            return {\n              character: character,\n              clicked: false\n            };\n          });\n\n          _this.setState({\n            score: 0,\n            topscore: 0,\n            characters: reset,\n            msg: \"Congratulations, you've guessed them all correctly! Play again.\"\n          });\n\n          console.log(\"CLEAR: \", reset); //console.log(\"SCORE === 12 after clearing\", this.state.score);\n        }\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(React.Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, React.createElement(Scoreboard, {\n        score: this.state.score,\n        topscore: this.state.topScore,\n        msg: this.state.msg,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \".\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, \"Clicky Game\")), React.createElement(Jumbotron, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }, this.state.characters.map(function (characters, index) {\n        return React.createElement(Card, {\n          key: index,\n          id: characters.id,\n          image: characters.image,\n          charSelect: _this2.charSelect,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 87\n          },\n          __self: this\n        });\n      })));\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/lydmgem/Desktop/Coding-Bootcamp/Homework/2019/April/Apr-21/REACT-Clicky-Game/src/App.js"],"names":["React","Scoreboard","Jumbotron","Card","characters","App","state","score","topScore","msg","charSelect","id","sortedChars","sort","Math","random","setState","selectedChar","find","character","console","log","clicked","charArr","i","length","butterflies","reset","map","topscore","index","image","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Scoreboard from \"./components/Scoreboard\";\nimport Jumbotron from \"./components/Jumbotron\"\nimport Card from \"./components/Card\"\nimport characters from \"./characters.json\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n\n  state = {\n    characters: characters,\n    score: 0,\n    topScore: 0,\n    msg: \"Click a character to begin!\"\n  }\n\n  charSelect = id => {\n\n    const sortedChars = this.state.characters.sort(() => Math.random() - 0.5);\n    this.setState({\n      characters: sortedChars\n    });\n\n    const selectedChar = this.state.characters.find(character => character.id === id);\n    console.log(selectedChar);\n\n    if (selectedChar.clicked) {\n      let charArr = this.state.characters;\n\n      for(let i = 0; i < charArr.length; i++) {\n        charArr[i].clicked = false;\n      }\n\n      this.setState({\n        score: 0,\n        characters: charArr,\n        msg: \"Sorry, try again!\"\n      })\n    } \n    else {\n        selectedChar.clicked = true;\n\n        if (this.state.score < 11) {\n          //console.log(\"SCORE < 12 before adding 1\", this.state.score);\n            this.setState({\n              score: this.state.score + 1,\n              msg: \"Good guess - keep on going!\"\n            });\n\n            if(this.state.score === this.state.topScore) {\n              this.setState({\n                topScore: this.state.topScore + 1,\n              });\n            }\n            console.log(\"ORIGINAL\", this.state.butterflies);\n        } else if (this.state.score === 11){\n\n          //console.log(\"SCORE === 12 before clearing\", this.state.score);\n          const reset = this.state.characters.map(character => {\n            return {character, clicked: false}\n           });\n\n           this.setState({\n             score: 0,\n             topscore: 0,\n             characters: reset,\n             msg: \"Congratulations, you've guessed them all correctly! Play again.\"\n           });\n\n           console.log(\"CLEAR: \", reset)\n           //console.log(\"SCORE === 12 after clearing\", this.state.score);\n        }\n\n       }\n      \n  };\n\n    render() {\n        return (\n          <React.Fragment>\n            <Scoreboard score={this.state.score} topscore={this.state.topScore} msg={this.state.msg}><a href=\".\">Clicky Game</a></Scoreboard>\n            <Jumbotron />\n\n            <div className=\"container\">\n              {\n                this.state.characters.map((characters, index) => (\n                  <Card\n                  key={index}\n                  id={characters.id}\n                  image={characters.image}\n                  charSelect={this.charSelect}/>\n                ))\n              }\n            </div>\n\n            </React.Fragment>\n        );\n      }\n  \n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}